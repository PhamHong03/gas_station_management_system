@include('clients.layouts.header')
// routes/web.php
// routes/web.php

use App\Http\Controllers\Auth\LoginController;
use Illuminate\Support\Facades\Auth;

Route::get('login', [LoginController::class, 'showLoginForm'])->name('login');
Route::post('login', [LoginController::class, 'login']);
Route::post('logout', [LoginController::class, 'logout'])->name('logout');

<body>
    <!-- Map Container -->
    <div id="user-avatar">
        <img src="https://i.pravatar.cc/1" alt="User Avatar">
    </div>
    <!-- ng∆∞·ªùi d√πng -->
    <div id="popup_avatar">
        @if (Auth::check())
            <p><strong>{{ Auth::user()->name }}</strong></p>
            <p>Email: {{ Auth::user()->email }}</p>
            <!-- Hide "ƒêƒÉng nh·∫≠p" if logged in -->
            <a href="{{ route('logout') }}" method="POST" id="logout-form">ƒêƒÉng Xu·∫•t</a>
        @else
            <!-- Show "ƒêƒÉng nh·∫≠p" if not logged in -->
            <a href="{{ route('login') }}" class="popup-item" id="login-btn">ƒêƒÉng nh·∫≠p</a>
        @endif
    </div>




    <div id="map">
        <div id="search-box">
            <input type="text" id="search-input" placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ...">
            <button id="search-btn">üîç</button>
            <i id="nav-icon" class="fa-solid fa-diamond-turn-right"></i>
        </div>

        <div id="navigation-form">
            <button id="nav-close-btn">‚ùå</button>
            <input type="text" id="start-location" placeholder="Nh·∫≠p ƒëi·ªÉm xu·∫•t ph√°t...">
            <input type="text" id="end-location" placeholder="Nh·∫≠p ƒëi·ªÉm ƒë·∫øn...">
            <div id="selectnavigationandnumber">
                <select id="fueltypes-form">
                    <option value="">Ch·ªçn ph∆∞∆°ng th·ª©c di chuy·ªÉn...</option>
                    <!-- C√°c option s·∫Ω ƒë∆∞·ª£c th√™m v√†o sau khi g·ªçi h√†m -->
                </select>

                <form id="form__cover">
                    <div id="select-box">
                        <input type="checkbox" id="options-view-button" />
                        <div id="select-button" class="section">
                            <div id="selected-value">
                                <span>Select a platform</span>
                            </div>
                        </div>
                        <div id="options">
                            <div class="option">
                                <input class="s-c top" type="radio" name="platform" value="Github" />
                                <input class="s-c bottom" type="radio" name="platform" value="Github" />
                                <span class="label">Github</span>
                                <span class="opt-val">Github</span>
                            </div>
                            <div class="option">
                                <input class="s-c top" type="radio" name="platform" value="Youtube" />
                                <input class="s-c bottom" type="radio" name="platform" value="Youtube" />
                                <span class="label">Youtube</span>
                                <span class="opt-val">Youtube</span>
                            </div>
                        </div>
                        <div id="option-bg"></div>
                    </div>
            </div>
            </form>
            <input type="text" id="number-location" placeholder="Nh·∫≠p kho·∫£ng c√°ch...">
        </div>
    </div>
    </div>

    <div id="danhmuc">
        <button class="category-btn">C·ª≠a h√†ng xƒÉng</button>
        <button class="category-btn">Tr·∫°m s·∫°c ƒëi·ªán</button>
        <button class="category-btn">C√¢y ATM</button>
    </div>


    <!-- Panel Th√¥ng tin b√™n tr√°i -->
    <div id="info-panel">
        <button id="close-btn">‚ùå</button>
        <div id="info-content">
            <!-- Tab 1: T·ªïng Quan -->
            <div class="tab-panel active" id="overview">
                <div id="overview-image">
                    <img src="gas_station/20250312_cay-xang-abc_2_38.png" alt="" id="location-image"
                        style="max-width:100%; height:auto; display:block; margin:0 auto;">
                </div>
                <h3 id="location-name"></h3>
                <p><strong>üìç ƒê·ªãa ch·ªâ:</strong> <span id="location-address"></span></p>
                <p><strong>‚è∞ Gi·ªù ho·∫°t ƒë·ªông:</strong> <span id="operation-time"></span></p>
                <p><strong>üìû ƒêi·ªán tho·∫°i:</strong> <span id="location-phone"></span></p>
                <p><strong>üìè Kho·∫£ng c√°ch:</strong> <span id="location-distance"></span></p>
                <button id="btn-route" onclick="showRoute()">üöó Ch·ªâ ƒë∆∞·ªùng</button>
            </div>
            <!-- B√†i ƒê√°nh Gi√° -->
            <div id="reviews-section">
                <h4>üì¢ ƒê√°nh gi√° c·ªßa kh√°ch h√†ng:</h4>
                <div id="reviews-list"></div>
                <h3>Th√™m ƒê√°nh Gi√°</h3>
                <form id="review-form">
                    <input type="text" id="review-name" placeholder="T√™n b·∫°n" required><br>
                    <select id="review-rating">
                        <option value="5">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
                        <option value="4">‚≠ê‚≠ê‚≠ê‚≠ê</option>
                        <option value="3">‚≠ê‚≠ê‚≠ê</option>
                        <option value="2">‚≠ê‚≠ê</option>
                        <option value="1">‚≠ê</option>
                    </select><br>
                    <textarea id="review-comment" placeholder="Nh·∫≠n x√©t c·ªßa b·∫°n" required></textarea><br>
                    <button type="submit">G·ª≠i</button>
                </form>
            </div>
        </div>
    </div>
    </div>



    <!-- Import Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <!-- Import Leaflet Geocoder JS -->
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
    <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
    <script>
        var mapOptions = {
            center: [10.026667, 105.783333],
            zoom: 15
        };


        var map = new L.map('map', mapOptions);
        var layer = new L.TileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
        map.addLayer(layer);

        var geocoder = L.Control.Geocoder.nominatim();
        var control = L.Control.geocoder({
            geocoder: geocoder,
            defaultMarkGeocode: false
        }).addTo(map);

        control.on("markgeocode", function(e) {
            var center = e.geocode.center; // L·∫•y t·ªça ƒë·ªô v·ªã tr√≠ t√¨m ki·∫øm ƒë∆∞·ª£c
            L.marker(center).addTo(map) // Th√™m marker v√†o v·ªã tr√≠ v·ª´a t√¨m th·∫•y
                .bindPopup(e.geocode.name) // Hi·ªÉn th·ªã t√™n ƒë·ªãa ƒëi·ªÉm trong popup
                .openPopup();
            map.setView(center, 15); // Di chuy·ªÉn b·∫£n ƒë·ªì ƒë·∫øn v·ªã tr√≠ ƒë√≥
        });



        // ƒê·ªãnh nghƒ©a icon c√¢y xƒÉng
        var gasStationIcon = L.icon({
            iconUrl: 'https://cdn-icons-png.flaticon.com/512/6686/6686706.png',
            iconSize: [35, 35], // K√≠ch th∆∞·ªõc c·ªßa logo
            iconAnchor: [20, 40], // ƒêi·ªÉm neo c·ªßa icon
            popupAnchor: [1, -34] // ƒêi·ªÉm neo c·ªßa popup
        });

        var locations = [
            @foreach ($gasStations as $station)
                {
                    id: {{ $station->id }},
                    name: "{{ $station->name }}",
                    address: "{{ $station->address }}",
                    phone: "{{ $station->phone }}",
                    operation_time: "{{ $station->operation_time }}",
                    image: "{{ asset('storage/' . $station->image) }}",
                    coords: [{{ $station->latitude }}, {{ $station->longitude }}],
                    rating: {{ $station->rating ?? 0 }} // N·∫øu rating null th√¨ m·∫∑c ƒë·ªãnh 0
                }
                @if (!$loop->last)
                    ,
                @endif
            @endforeach
        ];
        locations.forEach(location => {
            const marker = L.marker(location.coords, {
                icon: gasStationIcon
            }).addTo(map); // S·ª≠ d·ª•ng gasStationIcon cho marker

            // T·∫°o n·ªôi dung popup cho marker
            const popupContent = `
            <div>
                <h3>${location.name}</h3>
                <p>üìç ${location.address}</p>
                <p>üìû ${location.phone}</p>
                <p>üìè C√°ch b·∫°n: <b>${location.distance} km</b></p>
                <p>üïí Th·ªùi gian ho·∫°t ƒë·ªông: ${location.operation_time}</p>
                <p>‚≠ê ƒê√°nh gi√°: ${location.rating}</p>
            </div>
        `;
            marker.bindPopup(popupContent);

            // Khi click v√†o marker, c·∫≠p nh·∫≠t n·ªôi dung cho panel b√™n tr√°i
            marker.on("click", function() {
                // C·∫≠p nh·∫≠t th√¥ng tin trong panel b√™n tr√°i
                document.getElementById("location-image").src = location.image;
                document.getElementById("location-name").textContent = location.name;
                document.getElementById("location-address").textContent = location.address;
                document.getElementById("operation-time").textContent = location.operation_time;
                document.getElementById("location-phone").textContent = location.phone;
                document.getElementById("location-distance").textContent = `${location.distance} km`;

                // C·∫≠p nh·∫≠t ph·∫ßn ƒë√°nh gi√°
                let reviewsHtml = '';
                if (location.reviews && location.reviews.length > 0) {
                    location.reviews.forEach(review => {
                        reviewsHtml += `
                        <div class="review-item">
                            <p><strong>${review.name || '·∫®n danh'}</strong> - ‚≠ê ${review.rating}/5</p>
                            <p>üí¨ ${review.comment}</p>
                        </div>
                    `;
                    });
                } else {
                    reviewsHtml = "<p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√°!</p>";
                }
                document.getElementById("reviews-list").innerHTML = reviewsHtml;

                // Hi·ªÉn th·ªã panel b√™n tr√°i (n·∫øu c·∫ßn)
                showInfoPanel();
            });
        });



        // H√†m hi·ªÉn th·ªã panel b√™n tr√°i
        function showInfoPanel() {
            const infoPanel = document.getElementById("info-panel");
            if (infoPanel) {
                infoPanel.classList.add("show"); // Th√™m l·ªõp 'show' ƒë·ªÉ panel tr∆∞·ª£t v√†o
            }
        }
        // H√†m ƒë√≥ng panel b√™n tr√°i
        function hideInfoPanel() {
            const infoPanel = document.getElementById("info-panel");
            if (infoPanel) {
                infoPanel.classList.remove("show"); // Lo·∫°i b·ªè l·ªõp 'show' ƒë·ªÉ panel tr∆∞·ª£t ra ngo√†i
            }
        }
        // ƒê√≥ng panel khi click v√†o n√∫t ƒë√≥ng
        document.getElementById("close-btn").addEventListener("click", hideInfoPanel);

        // Hi·ªÉn th·ªã form navigation khi click v√†o icon
        document.getElementById("nav-icon").addEventListener("click", showNavForm);

        // ·∫®n form navigation khi click v√†o n√∫t ƒë√≥ng
        document.getElementById("nav-close-btn").addEventListener("click", hideNavForm);

        // H√†m ƒë·ªÉ hi·ªÉn th·ªã form
        function showNavForm() {
            document.getElementById("navigation-form").style.display = "block";
        }

        // H√†m ƒë·ªÉ ·∫©n form
        function hideNavForm() {
            document.getElementById("navigation-form").style.display = "none";
        }


        document.addEventListener("DOMContentLoaded", function() {
            const avatar = document.getElementById("user-avatar");
            const popup = document.getElementById("popup_avatar");

            // Toggle hi·ªÉn th·ªã popup khi nh·∫•n avatar
            avatar.addEventListener("click", function(event) {
                popup.classList.toggle("show"); // Hi·ªÉn th·ªã ho·∫∑c ·∫©n popup
                event.stopPropagation(); // NgƒÉn ch·∫∑n s·ª± ki·ªán lan ra ngo√†i
            });

            // ·∫®n popup khi nh·∫•n b√™n ngo√†i
            document.addEventListener("click", function(event) {
                if (!avatar.contains(event.target) && !popup.contains(event.target)) {
                    popup.classList.remove("show"); // ·∫®n popup
                }
            });

            // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p (c√≥ th·ªÉ thay ƒë·ªïi logic t√πy theo h·ªá th·ªëng c·ªßa b·∫°n)
            document.getElementById("login-btn").addEventListener("click", function() {
                alert("Ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p!");
                // B·∫°n c√≥ th·ªÉ th√™m logic ƒëƒÉng nh·∫≠p ·ªü ƒë√¢y, v√≠ d·ª•: chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p ho·∫∑c hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
            });

            // X·ª≠ l√Ω ƒëƒÉng xu·∫•t (c√≥ th·ªÉ thay ƒë·ªïi logic t√πy theo h·ªá th·ªëng c·ªßa b·∫°n)
            document.getElementById("logout-btn").addEventListener("click", function() {
                alert("ƒê√£ ƒëƒÉng xu·∫•t!");
                // B·∫°n c√≥ th·ªÉ th√™m logic ƒëƒÉng xu·∫•t ·ªü ƒë√¢y, v√≠ d·ª•: x√≥a cookie/session ho·∫∑c chuy·ªÉn v·ªÅ trang ch·ªß
            });
        });




        // T·∫°o icon m·∫∑c ƒë·ªãnh cho c√¢y xƒÉng
        // var gasStationIcon = L.icon({
        //     iconUrl: 'resources/gas-station.png', // ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
        //     iconSize: [20, 20], // K√≠ch th∆∞·ªõc icon (chi·ªÅu r·ªông, chi·ªÅu cao)
        //     iconAnchor: [20, 40], // ƒêi·ªÉm neo c·ªßa icon (n·∫±m d∆∞·ªõi c√πng ·ªü gi·ªØa)
        //     popupAnchor: [0, -40] // ƒêi·ªÉm neo c·ªßa popup
        // });
        // var userIcon = L.icon({
        //     iconUrl: '/assets/images/location.png', // ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh
        //     iconSize: [20, 20], // K√≠ch th∆∞·ªõc icon (chi·ªÅu r·ªông, chi·ªÅu cao)
        //     iconAnchor: [20, 40], // ƒêi·ªÉm neo c·ªßa icon (n·∫±m d∆∞·ªõi c√πng ·ªü gi·ªØa)
        //     popupAnchor: [0, -40] // ƒêi·ªÉm neo c·ªßa popup
        // });




        // function getStarRating(rating) {
        //   var fullStar = '‚≠ê';
        //   var stars = "";
        //   for (var i = 1; i <= 5; i++) {
        //       stars += i <= Math.floor(rating) ? fullStar : "‚òÜ";
        //   }
        //   return stars;
        // }

        // function showInfoPanel() {
        //   document.getElementById("info-panel").classList.add("show");
        //   document.getElementById("map").classList.add("expanded");
        // }
        // function hideInfoPanel() {
        //   document.getElementById("info-panel").classList.remove("show");
        //   document.getElementById("map").classList.remove("expanded");
        // }




        //     // Duy·ªát qua t·ª´ng ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ th√™m marker v·ªõi icon c√¢y xƒÉng
        //     locations.forEach(function(location) {
        //         var marker = L.marker(location.coords, { icon: gasStationIcon }).addTo(map);

        //         marker.bindPopup(`<h3>${location.name}</h3><p>üìç ${location.address}</p><p>üìû ${location.phone}</p>`);
        //     });
        // //icon s√†i ƒë∆∞·ª£c nh∆∞ng ch∆∞a ƒë√∫ng h√¨nh
        // locations.forEach(function(location) {
        //     var marker = L.marker(location.coords).addTo(map);
        //     marker.bindPopup(`<h3>${location.name}</h3><p>üìç ${location.address}</p><p>üìû ${location.phone}</p>`);
        // });



        // locations.forEach(function(location) {
        //   var marker = L.marker(location.coords).addTo(map);

        //         marker.setIcon(icon);
        //         marker.addTo(map);


        //   // ‚ùå Popup KH√îNG ch·ª©a h√¨nh ·∫£nh
        //   // var popupContent = `
    //   //   <div data-location-id="${location.id}">
    //   //     <h3 style="margin: 5px 0;">${location.name}</h3>
    //   //     <p style="margin: 5px 0; font-size: 16px;">ƒê√°nh gi√°: ${getStarRating(location.rating)} (${location.rating}/5)</p>
    //   //     <p style="margin: 5px 0; font-size: 14px;">‚è∞ Gi·ªù m·ªü c·ª≠a: <b>${location.openHours}</b></p>
    //   //   </div>
    //   // `;
        //   //marker.bindPopup(popupContent);
        //   marker.on("mouseover", function() {
        //     this.openPopup();
        //   });
        //   marker.on("mouseout", function() {
        //     this.closePopup();
        //   });




        //   // ‚úÖ Panel b√™n tr√°i s·∫Ω HI·ªÇN TH·ªä h√¨nh ·∫£nh
        //   marker.on("click", function() {
        //     document.getElementById("info-content").innerHTML = `
    //         // <div data-location-id="${location.id}">
    //         // <img src="${location.image}" alt="${location.name}" style="max-width:100%; height:auto; display:block; margin:0 auto;">
    //         // <h3>${location.name}</h3>
    //         // <p><strong>ƒê√°nh gi√°:</strong> ${getStarRating(location.rating)
    //         }
    //         // (${location.rating}/5)</p>

    //         <div id="tab-content">
    //             <!-- Tab 1: T·ªïng Quan -->
    //             // <div class="tab-panel active" id="overview">
    //             //     <p><strong>üìç ƒê·ªãa ch·ªâ:</strong> ${location.address}<span id="place-address"></span></p>
    //             //     <p><strong>‚è∞ Gi·ªù ho·∫°t ƒë·ªông:</strong> ${location.openHours} <span id="place-hours"></span></p>
    //             //     <p><strong>üìû ƒêi·ªán tho·∫°i:</strong> ${location.phone}<span id="place-phone"></span></p>
    //             // </div>
    //             <hr>

    //             <!-- B√†i ƒê√°nh Gi√° -->
    //             <div id="reviews">
    //                 <h3>üì¢ B√†i ƒê√°nh Gi√°</h3>
    //                 <div id="review-list">
    //                 ${location.reviews.length > 0
    //                     ? location.reviews.map(review => `
        //                         <div class="review-item">
        //                             <p><strong>${review.name}</strong> - ${getStarRating(review.rating)}</p>
        //                             <p>üí¨ ${review.comment}</p>

        //                         </div>
        //                     `).join('')
    //                     : "<p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√°!</p>"

    //   }
    //                 // <h3>Th√™m ƒê√°nh Gi√°</h3>
    //                 // <form id="review-form">
    //                 //   <input type="text" id="review-name" placeholder="T√™n b·∫°n" required><br>
    //                 //   <select id="review-rating">
    //                 //     <option value="5">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
    //                 //     <option value="4">‚≠ê‚≠ê‚≠ê‚≠ê</option>
    //                 //     <option value="3">‚≠ê‚≠ê‚≠ê</option>
    //                 //     <option value="2">‚≠ê‚≠ê</option>
    //                 //     <option value="1">‚≠ê</option>
    //                 //   </select><br>
    //                 //   <textarea id="review-comment" placeholder="Nh·∫≠n x√©t c·ªßa b·∫°n" required></textarea><br>
    //                 //   <button type="submit">G·ª≠i</button>
    //                 // </form>
    //                 </div>
    //             </div>
    //         </div>

    //       </div>
    //     `;
        //     showInfoPanel();
        //   });
        // });


        // let userLat, userLon;
        // navigator.geolocation.getCurrentPosition(function (position) {
        //     userLat = position.coords.latitude;
        //     userLon = position.coords.longitude;
        //     var userLocation = L.marker([userLat, userLon]).addTo(map);
        //     userLocation.setIcon(userIcon);
        //     userLocation.addTo(map);
        //     userLocation.bindPopup("V·ªã tr√≠ c·ªßa b·∫°n").openPopup();
        //     map.setView([userLat, userLon], 15);
        //     FetchLocation(userLat, userLon);
        // }, function (error) {
        //     console.error("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n:", error);
        //     FetchLocation(10.04501, 105.78088);
        // });




        // async function FetchLocation(Lat, Lon) {
        //     try {
        //         fetch(`http://127.0.0.1:8000/gas-station/FindGas?latitude=${Lat}&longitude=${Lon}`)
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error("L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API");
        //             }
        //             return response.json();
        //         })
        //         .then(data => {
        //           console.log(data);  // Th√™m d√≤ng n√†y ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
        //             if (!Array.isArray(data)) {
        //                 console.error("D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá:", data);
        //                 return;
        //             }

        //             data.forEach(location => {
        //                 const lat = parseFloat(location.latitude);
        //                 const lon = parseFloat(location.longitude);

        //                 var marker = L.marker([lat, lon]).addTo(map);
        //                 marker.setIcon(icon);
        //                 marker.addTo(map);

        //                 var popupContent = `
    //                     <div>
    //                         <h3>${location.name}</h3>
    //                         <p>üìç ${location.address}</p>
    //                         <p>üìû ${location.phone}</p>
    //                         <p>üìè C√°ch b·∫°n: <b>${location.distance} km</b></p>
    //                     </div>
    //                 `;
        //                 marker.bindPopup(popupContent);

        //                 // Khi click v√†o marker, c·∫≠p nh·∫≠t n·ªôi dung cho panel b√™n tr√°i
        //                 marker.on("click", function () {

        //                     // C·∫≠p nh·∫≠t th√¥ng tin trong panel b√™n tr√°i
        //                     document.getElementById("location-image").src = location.image;
        //                     document.getElementById("location-name").textContent = location.name;
        //                     document.getElementById("location-address").textContent = location.address;
        //                     document.getElementById("operation-time").textContent = location.operation_time;
        //                     document.getElementById("location-phone").textContent = location.phone;
        //                     document.getElementById("location-distance").textContent = `${location.distance} km`;
        //                     document.getElementById("btn-route").onclick = function() {
        //                         showRoute(Lat, Lon, lat, lon);
        //                     };
        //                     // C·∫≠p nh·∫≠t ph·∫ßn ƒë√°nh gi√°
        //                     let reviewsHtml = '';
        //                     if (location.reviews && location.reviews.length > 0) {
        //                         location.reviews.forEach(review => {
        //                             reviewsHtml += `
    //                                 <div class="review-item">
    //                                     <p><strong>${review.name || '·∫®n danh'}</strong> - ‚≠ê ${review.rating}/5</p>
    //                                     <p>üí¨ ${review.comment}</p>
    //                                 </div>
    //                             `;
        //                         });
        //                     } else {
        //                         reviewsHtml = "<p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√°!</p>";
        //                     }
        //                     document.getElementById("reviews-list").innerHTML = reviewsHtml;

        //                     // Hi·ªÉn th·ªã panel b√™n tr√°i
        //                     showInfoPanel();
        //                 });
        //             });
        //         });

        //     } catch (error) {
        //         console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
        //     }
        // }

        // async function FetchLocation(Lat, Lon) {
        //     try {
        //         fetch(`http://127.0.0.1:8000/gas-station/FindGas?latitude=${Lat}&longitude=${Lon}`)
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error("L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API");
        //             }
        //             return response.json();
        //         })
        //         .then(data => {
        //             if (!Array.isArray(data)) {
        //                 console.error("D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá:", data);
        //                 return;
        //             }

        //             data.forEach(location => {
        //                 const lat = parseFloat(location.latitude);
        //                 const lon = parseFloat(location.longitude);

        //                 var marker = L.marker([lat, lon]).addTo(map);
        //                 marker.setIcon(icon);
        //                 marker.addTo(map);

        //                 var popupContent = `
    //                     <div>
    //                         <h3>${location.name}</h3>
    //                         <p>üìç ${location.address}</p>
    //                         <p>üìû ${location.phone}</p>
    //                         <p>üìè C√°ch b·∫°n: <b>${location.distance} km</b></p>
    //                     </div>
    //                 `;
        //                 marker.bindPopup(popupContent);

        //                 // Khi click v√†o marker, c·∫≠p nh·∫≠t n·ªôi dung cho panel b√™n tr√°i
        //                 marker.on("click", function () {
        //                     document.getElementById("info-content").innerHTML = `
    //                         <div class="tab-panel active" id="overview">
    //                             <img src="${location.image}" alt="${location.name}" style="max-width:100%; height:auto; display:block; margin:0 auto;">
    //                             <h3>${location.name}</h3>
    //                             <p><strong>üìç ƒê·ªãa ch·ªâ:</strong> ${location.address}</p>
    //                             <p><strong>‚è∞ Gi·ªù ho·∫°t ƒë·ªông:</strong> ${location.operation_time}</p>
    //                             <p><strong>üìû ƒêi·ªán tho·∫°i:</strong> ${location.phone}</p>
    //                             <p><strong>üìè Kho·∫£ng c√°ch:</strong> ${location.distance} km</p>
    //                             <button id="btn-route" onclick="showRoute(${Lat}, ${Lon}, ${lat}, ${lon})">üöó Ch·ªâ ƒë∆∞·ªùng</button>

    //                             <div id="reviews">
    //                                 <p><strong>‚≠ê ƒê√°nh gi√° trung b√¨nh:</strong> ${location.rating ?? 'Ch∆∞a c√≥ ƒë√°nh gi√°'}</p>
    //                                 <h4>üì¢ ƒê√°nh gi√° c·ªßa kh√°ch h√†ng:</h4>
    //                                 <div class="reviews">
    //                                     ${location.reviews && location.reviews.length > 0
    //                                         ? location.reviews.map(review => `
        //                                             <div class="review-item">
        //                                                 <p><strong>${review.name || '·∫®n danh'}</strong> - ‚≠ê ${review.rating}/5</p>
        //                                                 <p>üí¨ ${review.comment}</p>
        //                                             </div>
        //                                         `).join('')
    //                                         : "<p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√°!</p>"
    //                                     }
    //                                 </div>
    //                             </div>
    //                         </div>
    //                     `;

        //                     // G·ªçi h√†m hi·ªÉn th·ªã panel b√™n tr√°i
        //                     showInfoPanel();
        //                 });
        //             });
        //         });

        //     } catch (error) {
        //         console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
        //     }
        // }


        // async function FetchLocation(Lat, Lon) {
        //     try {
        //         const response = await fetch(`http://127.0.0.1:8000/gas-station/FindGas?latitude=${Lat}&longitude=${Lon}`);

        //         if (!response.ok) {
        //             throw new Error("L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API");
        //         }

        //         const data = await response.json();
        //         if (!Array.isArray(data)) {
        //             console.error("D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá:", data);
        //             return;
        //         }

        //         data.forEach(location => {
        //             const lat = parseFloat(location.latitude);
        //             const lon = parseFloat(location.longitude);

        //             if (!isNaN(lat) && !isNaN(lon)) {
        //                 const marker = L.marker([lat, lon]).addTo(map);
        //                 marker.setIcon(icon);  // Ki·ªÉm tra n·∫øu b·∫°n c√≥ icon
        //                 marker.addTo(map);

        //                 var popupContent = `
    //                     <div>
    //                         <h3>${location.name}</h3>
    //                         <p>üìç ${location.address}</p>
    //                         <p>üìû ${location.phone}</p>
    //                         <p>üìè C√°ch b·∫°n: <b>${location.distance} km</b></p>
    //           </div>
    //         `;
        //                 marker.bindPopup(popupContent);
        //             } else {
        //                 console.error('T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá:', location.latitude, location.longitude);
        //             }
        //         });
        //     } catch (error) {
        //         console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
        //     }
        // }








        var currentRoute = null;
        // H√†m hi·ªÉn th·ªã ƒë∆∞·ªùng ƒëi
        function showRoute(userLat, userLon, destLat, destLon) {
            // X√≥a tuy·∫øn ƒë∆∞·ªùng c≈© n·∫øu c√≥
            if (currentRoute) {
                map.removeControl(currentRoute);
            }

            // T·∫°o tuy·∫øn ƒë∆∞·ªùng m·ªõi
            currentRoute = L.Routing.control({
                waypoints: [
                    L.latLng(userLat, userLon), // V·ªã tr√≠ c·ªßa b·∫°n
                    L.latLng(destLat, destLon) // Tr·∫°m xƒÉng ƒë∆∞·ª£c click
                ],
                routeWhileDragging: true
            }).addTo(map);
        }

        // FetchLocation();
        // document.getElementById("close-btn").addEventListener("click", hideInfoPanel);


        // button navigation
        function showNavForm() {
            document.getElementById("navigation-form").classList.add("show");
            document.getElementById("map").classList.add("expanded");

        }

        function hideNavForm() {
            document.getElementById("navigation-form").classList.remove("show");
            document.getElementById("map").classList.remove("expanded");

        }
    </script>
</body>

</html>
